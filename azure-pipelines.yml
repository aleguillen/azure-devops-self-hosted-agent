# -----------------------------------------------------------------------------
# .SYNOPSIS
#   This is the main pipeline for ADO Deployment. 
#   The main pipeline will orchestrate the build and deploy to environments. 

# .DESCRIPTION
#   This pipeline will perform setup tasks for the image by:
#   1. Copy and Publish Build Artifacts - Terraform scripts.
#   2. Create Storage Account or Terraform State - https://docs.microsoft.com/en-us/azure/terraform/terraform-backend
#   3. Find and replace token (variables) in .tf and .tfvars files.
#   4. Setup Terraform
#   5. Plan and Apply Terraform

# .ASSUMPTIONS:
#     1. You are referencing this template from an ado pipeline

# .NOTES
#     File Name      : azure-pipelines.yml
#     Prerequisite   : ADO Multi-Stage Yaml Pipeline
# -----------------------------------------------------------------------------

name: ADO-Infra-$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
      - README.md
      - azure-pipelines.sh

variables:
  - group: ado_dev_vars
  
  - name: ado_agent_pool
    value: 'Azure Pipelines'
  - name: ado_service_connection_name
    value: 'sc-ado-self-hosted-agent-azure-subscription'

stages: 
  - stage: Build
    displayName: Build  
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: ubuntu-18.04
        steps:
        - task: CopyFiles@2
          displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
          inputs:
            TargetFolder: '$(build.artifactstagingdirectory)'

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact: infra'
          inputs:
            ArtifactName: infra

  - stage: dev
    displayName: dev
    jobs:
      - job: Deploy
        displayName: Deploy
        pool:
          vmImage: ubuntu-18.04
        steps:   
        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'infra'
            downloadPath: '$(System.DefaultWorkingDirectory)/_artifacts'

        - task: AzureCLI@1
          displayName: 'Azure CLI to deploy required Azure resources (Terraform State)'
          inputs:
            azureSubscription: ${{ variables.ado_service_connection_name }}
            scriptLocation: inlineScript
            inlineScript: |
              # Create Azure resource group
              az group create --location $(location) --name $(terraformstoragerg)
              
              # Create Azure Storage Account
              az storage account create --name $(terraformstorageaccount) --resource-group $(terraformstoragerg) --location $(location) --sku Standard_LRS --kind StorageV2
              
              # Create Storage Container
              az storage container create --name terraform --account-name $(terraformstorageaccount)
              
              # Get Storage Key
              set KEY=$(az storage account keys list -g $(terraformstoragerg) -n $(terraformstorageaccount) --query "[0].value" -o tsv)
              
              # Set Storage Key as Variable for later use
              echo "##vso[task.setvariable variable=storagekey]$KEY"

        - task: qetza.replacetokens.replacetokens-task.replacetokens@3
          displayName: 'Replace tokens in terraform vars file'
          inputs:
            targetFiles: '**/*.tfvars'
            escapeType: none
            tokenPrefix: '__'
            tokenSuffix: '__'


        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
          displayName: 'Install Terraform 0.12.24'
          inputs:
            terraformVersion: 0.12.24
  
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
          displayName: 'Terraform : init'
          inputs:
            workingDirectory: '$(System.DefaultWorkingDirectory)/_artifacts/infra'
            backendServiceArm: ${{ variables.ado_service_connection_name }}
            backendAzureRmResourceGroupName: '$(terraformstoragerg)'
            backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
            backendAzureRmContainerName: terraform
            backendAzureRmKey: '/ado/terraform.tfstate'

        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
          displayName: 'Terraform : plan'
          inputs:
            command: plan
            workingDirectory: '$(System.DefaultWorkingDirectory)/_artifacts/infra'
            environmentServiceNameAzureRM: ${{ variables.ado_service_connection_name }}
            backendServiceArm: ${{ variables.ado_service_connection_name }}
            backendAzureRmResourceGroupName: '$(terraformstoragerg)'
            backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
            backendAzureRmContainerName: terraform
            backendAzureRmKey: '/ado/terraform.tfstate'

        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
          displayName: 'Terraform : apply -auto-approve'
          inputs:
            command: apply
            workingDirectory: '$(System.DefaultWorkingDirectory)/_artifacts/infra'
            commandOptions: '-auto-approve'
            environmentServiceNameAzureRM: ${{ variables.ado_service_connection_name }}
            backendServiceArm: ${{ variables.ado_service_connection_name }}
            backendAzureRmResourceGroupName: '$(terraformstoragerg)'
            backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
            backendAzureRmContainerName: terraform
            backendAzureRmKey: '/ado/terraform.tfstate'
